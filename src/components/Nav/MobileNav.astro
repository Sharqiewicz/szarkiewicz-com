---

---

<div class='block md:hidden'>
  <button
    type='button'
    aria-controls='mobile-menu'
    aria-expanded='false'
    id='menu-button'
    class='border-secondary hover:border-primary focus:border-primary inline-flex h-14 items-center justify-center overflow-hidden rounded-full border-2 p-1 transition focus:outline-none w-14 hover:scale-105 transition'
  >
    <div class='relative h-8 w-8'>
      <span class='absolute -inset-0.5'></span>
      <span class='sr-only'>Open main menu</span>
      <svg
        width='32'
        height='32'
        viewBox='0 0 32 32'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
        ><rect
          id='rect-one'
          x='6'
          y='9'
          width='20'
          height='2'
          rx='1'
          fill='currentColor'
          class='transition-all duration-300 ease-in-out'
          style='transform: none; transform-origin: 0px 0px;'></rect><rect
          class='transition-all duration-300 ease-in-out'
          id='rect-two'
          x='6'
          y='15'
          width='20'
          height='2'
          rx='1'
          fill='currentColor'></rect><rect
          class='transition-all duration-300 ease-in-out'
          id='rect-three'
          x='6'
          y='21'
          width='20'
          height='2'
          rx='1'
          fill='currentColor'
          style='transform: none; transform-origin: 0px 0px;'></rect></svg
      >
    </div>
  </button>
</div>

<style>
  .menu-background {
    background-color: #fff;
    z-index: 999;
  }

  :global(.dark) .menu-background {
    background-color: #2a2a48;
  }
</style>

<script>
  import { toggleMenu } from './mobileIconMenuAnimation.ts'

  function initMenuAnimations() {
    const menuButton = document.getElementById('menu-button')
    const menuElements: (HTMLElement | null)[] = [
      document.getElementById('mobile-menu'),
      document.getElementById('menu-bg'),
      document.getElementById('header'),
    ]

    if (
      Object.values(menuElements).some(element => element === null) ||
      !menuButton
    )
      return

    const assertMenuElements = menuElements as HTMLElement[]

    menuButton.addEventListener('click', () => {
      const isOpen = assertMenuElements.some(el =>
        el.classList.contains('fixed'),
      )

      console.log('isOpen')
      console.log(isOpen)

      toggleVisibility(isOpen, assertMenuElements)
      toggleMenu(isOpen)
    })
  }

  function handleSpecialElementStyles(element: HTMLElement) {
    if (element.id === 'header') {
      element.classList.remove('fixed')
      return true
    }
    return false
  }

  function toggleVisibility(isOpen: boolean, menuElements: HTMLElement[]) {
    const firstAction = isOpen ? 'add' : 'remove'
    const secondAction = isOpen ? 'remove' : 'add'
    const visibility = isOpen ? 'hidden' : 'fixed'

    function handleElementStyles(element: HTMLElement) {
      element.classList[firstAction]('hidden')
      element.classList[secondAction]('fixed')
      element.classList.add(visibility)
    }
    menuElements.map(element => {
      if (isOpen) {
        if (!handleSpecialElementStyles(element)) {
          handleElementStyles(element)
        }
      } else {
        handleElementStyles(element)
      }
    })
  }

  initMenuAnimations()
</script>
